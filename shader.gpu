

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;

varying vec3 normalVarying;
varying vec3 vertexVarying;

void main() {
    vertexVarying = mat3(ModelViewProjectionMatrix) * vertex;
    normalVarying = mat3(NormalMatrix)*normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 normalVarying;
varying vec3 vertexVarying;
uniform vec4 color;

void main() {
    vec3 N = normalize(normalVarying);
    vec3 L = normalize(vec3(1.0));
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertexVarying); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, vertexVarying), 0.0);
        specular = pow(specAngle, 20.0);
    }
    vec3 ambient = color.rgb*0.1;
    vec3 diffuse = color.rgb;
    vec3 c = vec3(ambient +
                        lambertian * diffuse +
                        specular * vec3(1.0));
    gl_FragColor = vec4(c,1.0);
    
}`;